[
  {
    "path": "public",
    "filename": "index.html",
    "code": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Stakeholder AI Platform</title>\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div class=\"wrapper\">\r\n        <nav id=\"sidebar\" class=\"sidebar\">\r\n            <div class=\"sidebar-header\">\r\n                <h3>Stakeholder AI</h3>\r\n            </div>\r\n            <ul class=\"list-unstyled components\">\r\n                <li><a href=\"#\" onclick=\"toggleSidebar()\">Toggle Sidebar</a></li>\r\n                <li><a href=\"/\">Requirements</a></li>\r\n                <li><a href=\"/wireframe-viewer\">Wireframes</a></li>\r\n                <li><a href=\"#\" id=\"download-json\">Download JSON</a></li>\r\n                <li><a href=\"#\" id=\"download-md\">Download Markdown</a></li>\r\n            </ul>\r\n        </nav>\r\n\r\n        <div id=\"content\" class=\"container-fluid\">\r\n            <section id=\"input-section\">\r\n                <h2 class=\"mt-4\">Start or Load Project</h2>\r\n                <div class=\"card p-3 mb-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"load-existing\">Load Existing Project:</label>\r\n                        <select id=\"load-existing\" class=\"form-control mb-2\"></select>\r\n                        <button id=\"start-over\" class=\"btn btn-secondary\">Start Over</button>\r\n                    </div>\r\n                    <form id=\"vision-form\" style=\"display: none;\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"project-name\">Project Name:</label>\r\n                            <input type=\"text\" id=\"project-name\" class=\"form-control\" required>\r\n                        </div>\r\n\r\n                        <div class=\"form-group\">\r\n                            <label for=\"vision\">Vision:</label>\r\n                            <textarea id=\"vision\" class=\"form-control\" rows=\"4\" required></textarea>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"scope\">Scope:</label>\r\n                            <textarea id=\"scope\" class=\"form-control\" rows=\"4\" required></textarea>\r\n                        </div>\r\n                        <button type=\"submit\" class=\"btn btn-primary mt-2\">Submit</button>\r\n                    </form>\r\n                </div>\r\n            </section>\r\n\r\n            <section id=\"review-section\" style=\"display: none;\">\r\n                <h2 id=\"project-title\" class=\"mt-4\">Review Project</h2>\r\n                \r\n                <div class=\"card mb-3\">\r\n                    <div class=\"card-header\">\r\n                        <ul class=\"nav nav-tabs card-header-tabs\">\r\n                            <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\" onclick=\"openMainTab(event, 'requirements-tab')\">Requirements</a></li>\r\n                            <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" onclick=\"openMainTab(event, 'epics-tab')\">Epics</a></li>\r\n                            <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" onclick=\"openMainTab(event, 'question-model-tab')\">Question Model</a></li>\r\n                        </ul>\r\n                    </div>\r\n                    <div class=\"card-body\">\r\n                        <div id=\"requirements-tab\" class=\"maintabcontent\" style=\"display: block;\">\r\n                            <div class=\"card mb-3\">\r\n                                <div class=\"card-header\">\r\n                                    <ul class=\"nav nav-tabs card-header-tabs\">\r\n                                        <li class=\"nav-item\"><a class=\"nav-link active\" href=\"#\" onclick=\"openTab(event, 'prompt-input')\">Prompt Input</a></li>\r\n                                        <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\" onclick=\"openTab(event, 'prompt-history')\">Prompt History</a></li>\r\n                                    </ul>\r\n                                </div>\r\n                                <div class=\"card-body\">\r\n                                    <div id=\"prompt-input\" class=\"tabcontent\" style=\"display: block;\">\r\n                                        <h5>Submit Prompt for More Requirements</h5>\r\n                                        <textarea id=\"new-prompt\" class=\"form-control\" rows=\"4\" placeholder=\"Enter a prompt to generate more requirements...\"></textarea>\r\n                                        <button id=\"submit-prompt\" class=\"btn btn-primary mt-2\">Submit Prompt</button>\r\n                                    </div>\r\n                                    <div id=\"prompt-history\" class=\"tabcontent\" style=\"display: none;\">\r\n                                        <h5>Prompt History</h5>\r\n                                        <ul id=\"prompt-list\" class=\"list-group\"></ul>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div class=\"accordion\" id=\"reviewAccordion\">\r\n                                <div class=\"accordion-item\">\r\n                                    <h2 class=\"accordion-header\">\r\n                                        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseReqs\">\r\n                                            Requirements (<span id=\"req-count\">0</span>)\r\n                                        </button>\r\n                                    </h2>\r\n                                    <div id=\"collapseReqs\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#reviewAccordion\">\r\n                                        <div class=\"accordion-body\">\r\n                                            <div id=\"req-filters\" class=\"mb-3\">\r\n                                                <label class=\"form-label\">Filter by Process:</label>\r\n                                                <button id=\"filter-req-all-process\" class=\"btn btn-outline-secondary btn-sm\">All</button>\r\n                                                <span id=\"process-filters\"></span>\r\n                                                <label class=\"form-label ms-3\">Filter by Entity:</label>\r\n                                                <button id=\"filter-req-all-entity\" class=\"btn btn-outline-secondary btn-sm\">All</button>\r\n                                                <span id=\"entity-filters\"></span>\r\n                                            </div>\r\n                                            <div id=\"requirements\"></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"accordion-item\">\r\n                                    <h2 class=\"accordion-header\">\r\n                                        <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseQs\">\r\n                                            Questions (<span id=\"open-q-count\">0</span>/<span id=\"all-q-count\">0</span>)\r\n                                        </button>\r\n                                    </h2>\r\n                                    <div id=\"collapseQs\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#reviewAccordion\">\r\n                                        <div class=\"accordion-body\">\r\n                                            <div id=\"filters\" class=\"mb-3\">\r\n                                                <label class=\"form-label\">Filter by To:</label>\r\n                                                <button id=\"filter-all\" class=\"btn btn-outline-secondary btn-sm\">All</button>\r\n                                                <span id=\"to-filters\"></span>\r\n                                                <label class=\"form-label ms-3\">Status:</label>\r\n                                                <select id=\"status-filter\" class=\"form-select d-inline-block w-auto\">\r\n                                                    <option value=\"Open\">Open</option>\r\n                                                    <option value=\"Resolved\">Resolved</option>\r\n                                                </select>\r\n                                            </div>\r\n                                            <div id=\"questions\"></div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <form id=\"req-prompt-form\" class=\"mt-3\" style=\"display: none;\">\r\n                                <div class=\"mb-3\">\r\n                                    <label for=\"req-prompt\" class=\"form-label\">Prompt for Requirement Clarification:</label>\r\n                                    <input type=\"hidden\" id=\"selected-req-id\">\r\n                                    <textarea id=\"req-prompt\" class=\"form-control\" rows=\"4\" placeholder=\"Enter a prompt to clarify this requirement...\"></textarea>\r\n                                </div>\r\n                                <button type=\"submit\" class=\"btn btn-primary\">Submit Requirement Prompt</button>\r\n                            </form>\r\n\r\n                            <form id=\"answer-form\" class=\"mt-3\">\r\n                                <div class=\"mb-3\">\r\n                                    <label for=\"question-select\" class=\"form-label\">Select a Question to Answer:</label>\r\n                                    <select id=\"question-select\" class=\"form-select\" required></select>\r\n                                </div>\r\n                                <div id=\"answer-options\" class=\"mb-3\"></div>\r\n                                <div class=\"mb-3\">\r\n                                    <textarea id=\"answer\" class=\"form-control\" rows=\"4\" placeholder=\"Selected options or custom answer will appear here\"></textarea>\r\n                                </div>\r\n                                <button type=\"submit\" class=\"btn btn-primary\">Submit Answer</button>\r\n                                <button type=\"button\" id=\"stop-questions\" class=\"btn btn-warning\">Stop This Line of Questions</button>\r\n                            </form>\r\n                        </div>\r\n\r\n                        <div id=\"epics-tab\" class=\"maintabcontent\" style=\"display: none;\">\r\n                            <h5>Create or Edit Epic</h5>\r\n                            <form id=\"epic-form\" class=\"mb-3\">\r\n                                <div class=\"mb-3\">\r\n                                    <label for=\"epic-name\" class=\"form-label\">Epic Name:</label>\r\n                                    <input type=\"text\" id=\"epic-name\" class=\"form-control\" required>\r\n                                </div>\r\n                                <div class=\"accordion\" id=\"epicAccordion\">\r\n                                    <div class=\"accordion-item\">\r\n                                        <h2 class=\"accordion-header\">\r\n                                            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseEpicReqs\">\r\n                                                Requirements (<span id=\"epic-req-count\">0</span>)\r\n                                            </button>\r\n                                        </h2>\r\n                                        <div id=\"collapseEpicReqs\" class=\"accordion-collapse collapse show\" data-bs-parent=\"#epicAccordion\">\r\n                                            <div class=\"accordion-body\">\r\n                                                <div id=\"epic-requirements\"></div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <button type=\"submit\" class=\"btn btn-primary mt-2\">Save Epic</button>\r\n                            </form>\r\n                            <div id=\"epics-list\" class=\"mt-3\"></div>\r\n                        </div>\r\n\r\n                        <div id=\"question-model-tab\" class=\"maintabcontent\" style=\"display: none;\">\r\n                            <h5>Ask Questions about the Project</h5>\r\n                            <textarea id=\"question-prompt\" class=\"form-control\" rows=\"4\" placeholder=\"Enter your questions here...\"></textarea>\r\n                            <button id=\"submit-question\" class=\"btn btn-primary mt-2\">Submit Question</button>\r\n                            <div id=\"question-response\" class=\"mt-3\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n"
  },
  {
    "path": "public",
    "filename": "script.js",
    "code": "let currentToFilter = 'Stakeholder';\r\nlet currentStatusFilter = 'Open';\r\nlet selectedAnswers = [];\r\nlet currentProcessFilter = null;\r\nlet currentEntityFilter = null;\r\nlet promptHistory = [];\r\nlet selectedRequirements = [];\r\n\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n    await loadProjectOptions();\r\n});\r\n\r\nasync function loadProjectOptions() {\r\n    try {\r\n        const response = await fetch('/api/list-projects');\r\n        if (!response.ok) throw new Error(await response.text());\r\n        const projects = await response.json();\r\n        const select = document.getElementById('load-existing');\r\n        select.innerHTML = '<option value=\"\">Select a project</option>' + projects.map(p => `<option value=\"${p}\">${p}</option>`).join('');\r\n    } catch (error) {\r\n        console.error('Load Projects Error:', error);\r\n        alert('Failed to load project list: ' + error.message);\r\n    }\r\n}\r\n\r\ndocument.getElementById('load-existing').addEventListener('change', async (e) => {\r\n    const projectName = e.target.value;\r\n    if (!projectName) return;\r\n\r\n    try {\r\n        const response = await fetch('/api/load-existing', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ projectName })\r\n        });\r\n        if (!response.ok) throw new Error(await response.text());\r\n        document.getElementById('input-section').style.display = 'none';\r\n        document.getElementById('review-section').style.display = 'block';\r\n        await loadReview();\r\n    } catch (error) {\r\n        console.error('Load Error:', error);\r\n        alert('Failed to load project: ' + error.message);\r\n    }\r\n});\r\n\r\ndocument.getElementById('start-over').addEventListener('click', () => {\r\n    document.getElementById('vision-form').style.display = 'block';\r\n    document.getElementById('load-existing').style.display = 'none';\r\n    document.getElementById('start-over').style.display = 'none';\r\n});\r\n\r\ndocument.getElementById('vision-form').addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    const projectNameInput = document.getElementById('project-name').value.trim();\r\n    const vision = document.getElementById('vision').value;\r\n    const scope = document.getElementById('scope').value;\r\n\r\n    const invalidChars = /[<>:\"/\\\\|?*]/g;\r\n    if (invalidChars.test(projectNameInput) || projectNameInput === '') {\r\n        alert('Project name cannot contain < > : \" / \\\\ | ? * or be empty');\r\n        return;\r\n    }\r\n    const projectName = projectNameInput.replace(/\\s+/g, '_');\r\n\r\n    try {\r\n        const response = await fetch('/api/submit', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ projectName, vision, scope })\r\n        });\r\n        if (!response.ok) throw new Error(await response.text());\r\n        document.getElementById('input-section').style.display = 'none';\r\n        document.getElementById('review-section').style.display = 'block';\r\n        await loadReview();\r\n    } catch (error) {\r\n        console.error('Submit Error:', error);\r\n        alert('Failed to submit: ' + error.message);\r\n    }\r\n});\r\n\r\ndocument.getElementById('answer-form').addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    const questionId = document.getElementById('question-select').value;\r\n    const customAnswer = document.getElementById('answer').value.trim();\r\n    const answer = selectedAnswers.length > 0 ? selectedAnswers.join(', ') : (customAnswer || alert('Please select at least one option or enter an answer'));\r\n\r\n    if (answer) {\r\n        try {\r\n            const response = await fetch('/api/answer', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ questionId, answer })\r\n            });\r\n            if (!response.ok) throw new Error(await response.text());\r\n            selectedAnswers = [];\r\n            document.getElementById('answer').value = '';\r\n            document.querySelectorAll('.answer-option').forEach(opt => opt.classList.remove('selected'));\r\n            await loadReview();\r\n        } catch (error) {\r\n            console.error('Answer Error:', error);\r\n            alert('Failed to answer: ' + error.message);\r\n        }\r\n    }\r\n});\r\n\r\ndocument.getElementById('stop-questions').addEventListener('click', async () => {\r\n    const questionId = document.getElementById('question-select').value;\r\n    try {\r\n        const response = await fetch('/api/stop-questions', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ questionId })\r\n        });\r\n        if (!response.ok) throw new Error(await response.text());\r\n        await loadReview();\r\n    } catch (error) {\r\n        console.error('Stop Questions Error:', error);\r\n        alert('Failed to stop questions: ' + error.message);\r\n    }\r\n});\r\n\r\ndocument.getElementById('submit-prompt').addEventListener('click', async () => {\r\n    const promptText = document.getElementById('new-prompt').value.trim();\r\n    if (!promptText) {\r\n        alert('Please enter a prompt');\r\n        return;\r\n    }\r\n    try {\r\n        const response = await fetch('/api/add-requirements', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ prompt: promptText })\r\n        });\r\n        if (!response.ok) throw new Error(await response.text());\r\n        promptHistory.push(promptText);\r\n        document.getElementById('new-prompt').value = '';\r\n        updatePromptHistory();\r\n        await loadReview();\r\n    } catch (error) {\r\n        console.error('Prompt Error:', error);\r\n        alert('Failed to submit prompt: ' + error.message);\r\n    }\r\n});\r\n\r\ndocument.getElementById('req-prompt-form').addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    const reqId = document.getElementById('selected-req-id').value;\r\n    const promptText = document.getElementById('req-prompt').value.trim();\r\n    if (!promptText) {\r\n        alert('Please enter a prompt');\r\n        return;\r\n    }\r\n    try {\r\n        const response = await fetch('/api/clarify-requirement', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ reqId, prompt: promptText })\r\n        });\r\n        if (!response.ok) throw new Error(await response.text());\r\n        promptHistory.push(`Clarification for ${reqId}: ${promptText}`);\r\n        document.getElementById('req-prompt').value = '';\r\n        document.getElementById('req-prompt-form').style.display = 'none';\r\n        updatePromptHistory();\r\n        await loadReview();\r\n    } catch (error) {\r\n        console.error('Req Prompt Error:', error);\r\n        alert('Failed to submit requirement prompt: ' + error.message);\r\n    }\r\n});\r\n\r\ndocument.getElementById('epic-form').addEventListener('submit', async (e) => {\r\n    e.preventDefault();\r\n    const epicName = document.getElementById('epic-name').value.trim();\r\n    if (!epicName || selectedRequirements.length === 0) {\r\n        alert('Please enter an epic name and select at least one requirement');\r\n        return;\r\n    }\r\n    try {\r\n        const response = await fetch('/api/add-epic', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ epicName, requirementIds: selectedRequirements })\r\n        });\r\n        if (!response.ok) throw new Error(await response.text());\r\n        selectedRequirements = [];\r\n        document.getElementById('epic-name').value = '';\r\n        document.querySelectorAll('.epic-req-checkbox').forEach(cb => cb.checked = false);\r\n        await loadReview();\r\n    } catch (error) {\r\n        console.error('Epic Error:', error);\r\n        alert('Failed to add epic: ' + error.message);\r\n    }\r\n});\r\n\r\ndocument.getElementById('question-select').addEventListener('change', (e) => {\r\n    const questionInternalId = e.target.value;\r\n    const optionsDiv = document.getElementById('answer-options');\r\n    optionsDiv.innerHTML = '';\r\n\r\n    if (questionInternalId) {\r\n        fetch('/api/review')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const question = data.questions.find(q => q.internalId === questionInternalId);\r\n                if (question && question.options && question.options.length) {\r\n                    optionsDiv.innerHTML = '<label class=\"form-label\">Answer Options (Select multiple):</label><br>' + question.options.map(option => \r\n                        `<div class=\"answer-option\" data-answer=\"${option}\">${option}</div>`\r\n                    ).join('');\r\n                    document.querySelectorAll('.answer-option').forEach(option => {\r\n                        option.addEventListener('click', () => {\r\n                            const value = option.dataset.answer;\r\n                            if (selectedAnswers.includes(value)) {\r\n                                selectedAnswers = selectedAnswers.filter(v => v !== value);\r\n                                option.classList.remove('selected');\r\n                            } else {\r\n                                selectedAnswers.push(value);\r\n                                option.classList.add('selected');\r\n                            }\r\n                            document.getElementById('answer').value = selectedAnswers.join(', ');\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n    }\r\n});\r\n\r\ndocument.getElementById('download-json').addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    window.location.href = '/api/download/json';\r\n});\r\n\r\ndocument.getElementById('download-md').addEventListener('click', (e) => {\r\n    e.preventDefault();\r\n    window.location.href = '/api/download/md';\r\n});\r\n\r\ndocument.getElementById('status-filter').addEventListener('change', (e) => {\r\n    currentStatusFilter = e.target.value;\r\n    loadReview();\r\n});\r\n\r\nasync function loadReview() {\r\n    try {\r\n        const response = await fetch('/api/review');\r\n        if (!response.ok) throw new Error(await response.text());\r\n        const data = await response.json();\r\n\r\n        document.getElementById('project-title').textContent = `Project: ${data.projectName}`;\r\n        document.getElementById('req-count').textContent = data.requirements.length;\r\n\r\n        const processValues = [...new Set(data.requirements.map(r => r.process).filter(p => p))];\r\n        const entityValues = [...new Set(data.requirements.map(r => r.entity).filter(e => e))];\r\n\r\n        const processCounts = {};\r\n        const entityCounts = {};\r\n        data.requirements.forEach(r => {\r\n            processCounts[r.process] = (processCounts[r.process] || 0) + 1;\r\n            entityCounts[r.entity] = (entityCounts[r.entity] || 0) + 1;\r\n        });\r\n\r\n        const processFilters = document.getElementById('process-filters');\r\n        processFilters.innerHTML = processValues.map(process => \r\n            `<button class=\"btn btn-outline-secondary btn-sm filter-req-process${process === currentProcessFilter ? ' active' : ''}\" data-process=\"${process}\">${process} (${processCounts[process] || 0})</button>`\r\n        ).join('');\r\n        \r\n        const entityFilters = document.getElementById('entity-filters');\r\n        entityFilters.innerHTML = entityValues.map(entity => \r\n            `<button class=\"btn btn-outline-secondary btn-sm filter-req-entity${entity === currentEntityFilter ? ' active' : ''}\" data-entity=\"${entity}\">${entity} (${entityCounts[entity] || 0})</button>`\r\n        ).join('');\r\n\r\n        document.querySelectorAll('.filter-req-process').forEach(button => {\r\n            button.addEventListener('click', (e) => {\r\n                currentProcessFilter = e.target.dataset.process;\r\n                document.querySelectorAll('.filter-req-process').forEach(btn => btn.classList.remove('active'));\r\n                e.target.classList.add('active');\r\n                loadReview();\r\n            });\r\n        });\r\n\r\n        document.querySelectorAll('.filter-req-entity').forEach(button => {\r\n            button.addEventListener('click', (e) => {\r\n                currentEntityFilter = e.target.dataset.entity;\r\n                document.querySelectorAll('.filter-req-entity').forEach(btn => btn.classList.remove('active'));\r\n                e.target.classList.add('active');\r\n                loadReview();\r\n            });\r\n        });\r\n\r\n        document.getElementById('filter-req-all-process').addEventListener('click', () => {\r\n            currentProcessFilter = null;\r\n            document.querySelectorAll('.filter-req-process').forEach(btn => btn.classList.remove('active'));\r\n            loadReview();\r\n        });\r\n\r\n        document.getElementById('filter-req-all-entity').addEventListener('click', () => {\r\n            currentEntityFilter = null;\r\n            document.querySelectorAll('.filter-req-entity').forEach(btn => btn.classList.remove('active'));\r\n            loadReview();\r\n        });\r\n\r\n        const filteredRequirements = data.requirements.filter(r => \r\n            (currentProcessFilter ? r.process === currentProcessFilter : true) && \r\n            (currentEntityFilter ? r.entity === currentEntityFilter : true)\r\n        );\r\n        document.getElementById('requirements').innerHTML = filteredRequirements.map(r => \r\n            `<div class=\"req-item\" data-req-id=\"${r.internalId}\">\r\n                <p>${r.id}: ${r.text}${r.epic ? ' [Epic: ' + r.epic + ']' : ''}</p>\r\n                <div class=\"req-details\">\r\n                    <span>Benefit: ${r.benefit}</span><br>\r\n                    <span>Objective: ${r.objective}</span><br>\r\n                    <span>Value: ${r.value}</span><br>\r\n                    ${r.process ? `<span>Process: ${r.process}</span><br>` : ''}\r\n                    ${r.entity ? `<span>Entity: ${r.entity}</span><br>` : ''}\r\n                    ${r.useCase ? `<span>Use Case: ${r.useCase}</span>` : ''}\r\n                </div>\r\n            </div>`\r\n        ).join('');\r\n\r\n        document.getElementById('open-q-count').textContent = data.questions.filter(q => q.status === 'Open').length;\r\n        document.getElementById('all-q-count').textContent = data.questions.length;\r\n        \r\n        const toValues = [...new Set(data.questions.map(q => q.to))];\r\n        const toCounts = {};\r\n        data.questions.forEach(q => toCounts[q.to] = (toCounts[q.to] || 0) + 1);\r\n\r\n        const toFilters = document.getElementById('to-filters');\r\n        toFilters.innerHTML = toValues.map(to => \r\n            `<button class=\"btn btn-outline-secondary btn-sm filter-to${to === currentToFilter ? ' active' : ''}\" data-to=\"${to}\">${to} (${toCounts[to]})</button>`\r\n        ).join('');\r\n\r\n        document.querySelectorAll('.filter-to').forEach(button => {\r\n            button.addEventListener('click', (e) => {\r\n                currentToFilter = e.target.dataset.to;\r\n                document.querySelectorAll('.filter-to').forEach(btn => btn.classList.remove('active'));\r\n                e.target.classList.add('active');\r\n                loadReview();\r\n            });\r\n        });\r\n\r\n        document.getElementById('filter-all').addEventListener('click', () => {\r\n            currentToFilter = null;\r\n            document.querySelectorAll('.filter-to').forEach(btn => btn.classList.remove('active'));\r\n            loadReview();\r\n        });\r\n\r\n        const filteredQuestions = data.questions.filter(q => \r\n            (currentToFilter ? q.to === currentToFilter : true) && \r\n            q.status === currentStatusFilter\r\n        );\r\n        document.getElementById('questions').innerHTML = filteredQuestions.map(q => \r\n            `<p class=\"question-item\" data-question-id=\"${q.internalId}\">${q.id}: ${q.text} (To: ${q.to}, Topic: ${q.topic}, ${q.status})</p>`\r\n        ).join('');\r\n\r\n        const select = document.getElementById('question-select');\r\n        select.innerHTML = '<option value=\"\">Select a question</option>' + filteredQuestions\r\n            .filter(q => q.status === 'Open')\r\n            .map(q => `<option value=\"${q.internalId}\">${q.id}: ${q.text} (To: ${q.to})</option>`).join('');\r\n\r\n        const unassignedRequirements = data.requirements.filter(r => !r.epic);\r\n        document.getElementById('epic-req-count').textContent = unassignedRequirements.length;\r\n        document.getElementById('epic-requirements').innerHTML = unassignedRequirements.map(r => \r\n            `<div class=\"epic-req-item\">\r\n                <input type=\"checkbox\" class=\"epic-req-checkbox\" data-req-id=\"${r.internalId}\" ${selectedRequirements.includes(r.internalId) ? 'checked' : ''}>\r\n                ${r.id}: ${r.text}\r\n            </div>`\r\n        ).join('');\r\n\r\n        document.querySelectorAll('.epic-req-checkbox').forEach(checkbox => {\r\n            checkbox.addEventListener('change', (e) => {\r\n                const reqId = e.target.dataset.reqId;\r\n                if (e.target.checked) {\r\n                    if (!selectedRequirements.includes(reqId)) selectedRequirements.push(reqId);\r\n                } else {\r\n                    selectedRequirements = selectedRequirements.filter(id => id !== reqId);\r\n                }\r\n            });\r\n        });\r\n\r\n        const epicsList = document.getElementById('epics-list');\r\n        const epics = data.epics || [];\r\n        epicsList.innerHTML = epics.map(e => \r\n            `<div class=\"epic-list-item\">\r\n                ${e.name}: ${e.requirementIds.map(id => data.requirements.find(r => r.internalId === id)?.id || 'Unknown').join(', ')}\r\n                ${e.devOpsId ? `<button class=\"btn btn-success btn-sm add-to-devops-btn\" disabled>Synced (ID: ${e.devOpsId})</button>` : `<button class=\"btn btn-primary btn-sm add-to-devops-btn\" data-epic-name=\"${e.name}\" data-req-ids=\"${e.requirementIds.join(',')}\">Add to DevOps</button>`}\r\n                <button class=\"btn btn-info btn-sm queue-epic-btn\" data-epic-name=\"${e.name}\" data-req-ids=\"${e.requirementIds.join(',')}\">Queue Epic</button>\r\n                <button class=\"btn btn-warning btn-sm create-workitems-btn\" data-epic-name=\"${e.name}\">Create Work Items</button>\r\n            </div>`\r\n        ).join('');\r\n\r\n        document.querySelectorAll('.add-to-devops-btn:not(:disabled)').forEach(button => {\r\n            button.addEventListener('click', async (e) => {\r\n                const epicName = e.target.dataset.epicName;\r\n                const requirementIds = e.target.dataset.reqIds.split(',');\r\n                try {\r\n                    const response = await fetch('/api/add-epic-to-devops', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ epicName, requirementIds })\r\n                    });\r\n                    if (!response.ok) throw new Error(await response.text());\r\n                    await loadReview();\r\n                } catch (error) {\r\n                    console.error('Add to DevOps Error:', error);\r\n                    alert('Failed to add epic to DevOps: ' + error.message);\r\n                }\r\n            });\r\n        });\r\n\r\n        document.querySelectorAll('.queue-epic-btn').forEach(button => {\r\n            button.addEventListener('click', async (e) => {\r\n                const epicName = e.target.dataset.epicName;\r\n                const requirementIds = e.target.dataset.reqIds.split(',');\r\n                // Collect full requirement objects including id\r\n                const requirements = data.requirements\r\n                    .filter(r => requirementIds.includes(r.internalId))\r\n                    .map(r => ({\r\n                        id: r.id, // Include the requirement ID\r\n                        description: r.text || '',\r\n                        benefit: r.benefit || 'Unknown',\r\n                        objective: r.objective || 'Unknown',\r\n                        value: r.value || 'Unknown'\r\n                    }));\r\n\r\n                if (requirements.length === 0) {\r\n                    alert('No valid requirements found for this Epic');\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    console.log(`Queuing Epic ${epicName} with requirements:`, requirements);\r\n                    const response = await fetch('/api/orchestrate', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ requirements })\r\n                    });\r\n                    if (!response.ok) throw new Error(await response.text());\r\n                    const results = await response.json();\r\n                    console.log(`Orchestration Results for ${epicName}:`, results);\r\n                    alert(`Epic ${epicName} queued successfully! Check console for results.`);\r\n                } catch (error) {\r\n                    console.error('Queue Epic Error:', error);\r\n                    alert('Failed to queue epic: ' + error.message);\r\n                }\r\n            });\r\n        });\r\n\r\n        document.querySelectorAll('.create-workitems-btn').forEach(button => {\r\n            button.addEventListener('click', async (e) => {\r\n                const epicName = e.target.dataset.epicName;\r\n                try {\r\n                    const response = await fetch('/api/create-workitems', {\r\n                        method: 'POST',\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                        body: JSON.stringify({ epicName })\r\n                    });\r\n                    if (!response.ok) throw new Error(await response.text());\r\n                    const result = await response.json();\r\n                    alert(`Work items created for epic ${epicName}: ${result.message}`);\r\n                } catch (error) {\r\n                    console.error('Create Work Items Error:', error);\r\n                    alert('Failed to create work items: ' + error.message);\r\n                }\r\n            });\r\n        });\r\n        \r\n        document.querySelectorAll('.question-item').forEach(item => {\r\n            item.addEventListener('click', () => {\r\n                const questionId = item.dataset.questionId;\r\n                select.value = questionId;\r\n                select.dispatchEvent(new Event('change'));\r\n            });\r\n        });\r\n\r\n        document.querySelectorAll('.req-item').forEach(item => {\r\n            item.addEventListener('click', () => {\r\n                const reqId = item.dataset.reqId;\r\n                document.getElementById('selected-req-id').value = reqId;\r\n                document.getElementById('req-prompt-form').style.display = 'block';\r\n            });\r\n        });\r\n    } catch (error) {\r\n        console.error('Review Error:', error);\r\n        alert('Failed to load review: ' + error.message);\r\n    }\r\n}\r\n\r\nfunction toggleSidebar() {\r\n    document.getElementById('sidebar').classList.toggle('collapsed');\r\n}\r\n\r\nfunction openMainTab(evt, tabName) {\r\n    const tabcontent = document.getElementsByClassName('maintabcontent');\r\n    for (let i = 0; i < tabcontent.length; i++) {\r\n        tabcontent[i].style.display = 'none';\r\n    }\r\n    const tablinks = document.querySelectorAll('.nav-tabs.card-header-tabs .nav-link');\r\n    for (let i = 0; i < tablinks.length; i++) {\r\n        tablinks[i].classList.remove('active');\r\n    }\r\n    document.getElementById(tabName).style.display = 'block';\r\n    evt.currentTarget.classList.add('active');\r\n}\r\n\r\nfunction openTab(evt, tabName) {\r\n    const tabcontent = document.getElementsByClassName('tabcontent');\r\n    for (let i = 0; i < tabcontent.length; i++) {\r\n        tabcontent[i].style.display = 'none';\r\n    }\r\n    const tablinks = document.querySelectorAll('.nav-tabs.card-header-tabs .nav-link:not(.card-header-tabs .nav-link)');\r\n    for (let i = 0; i < tablinks.length; i++) {\r\n        tablinks[i].classList.remove('active');\r\n    }\r\n    document.getElementById(tabName).style.display = 'block';\r\n    evt.currentTarget.classList.add('active');\r\n}\r\n\r\nfunction updatePromptHistory() {\r\n    const list = document.getElementById('prompt-list');\r\n    list.innerHTML = promptHistory.map(p => `<li class=\"list-group-item\">${p}</li>`).join('');\r\n}\r\n\r\ndocument.getElementById('submit-question').addEventListener('click', async () => {\r\n    const question = document.getElementById('question-prompt').value.trim();\r\n    if (!question) {\r\n        alert('Please enter a question');\r\n        return;\r\n    }\r\n    try {\r\n        const response = await fetch('/api/ask-question', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ question })\r\n        });\r\n        if (!response.ok) throw new Error(await response.text());\r\n        const result = await response.json();\r\n        document.getElementById('question-response').innerHTML = `<p>${result.answer}</p>`;\r\n    } catch (error) {\r\n        console.error('Ask Question Error:', error);\r\n        alert('Failed to ask question: ' + error.message);\r\n    }\r\n});\r\n\r\nloadReview();\r\n"
  },
  {
    "path": "public",
    "filename": "style.css",
    "code": "body {\r\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    background-color: #f8f9fa;\r\n}\r\n\r\n.wrapper {\r\n    display: flex;\r\n    width: 100%;\r\n    align-items: stretch;\r\n}\r\n\r\n.sidebar {\r\n    min-width: 250px;\r\n    max-width: 250px;\r\n    background: #343a40;\r\n    color: #fff;\r\n    transition: all 0.3s;\r\n}\r\n\r\n.sidebar.collapsed {\r\n    margin-left: -250px;\r\n}\r\n\r\n.sidebar-header {\r\n    padding: 20px;\r\n    background: #2c3136;\r\n}\r\n\r\n.sidebar ul.components {\r\n    padding: 20px 0;\r\n}\r\n\r\n.sidebar ul li a {\r\n    padding: 10px 20px;\r\n    display: block;\r\n    color: #adb5bd;\r\n    text-decoration: none;\r\n}\r\n\r\n.sidebar ul li a:hover {\r\n    color: #fff;\r\n    background: #495057;\r\n}\r\n\r\n#content {\r\n    width: 100%;\r\n    padding: 20px;\r\n    min-height: 100vh;\r\n    transition: all 0.3s;\r\n}\r\n\r\n.card {\r\n    border: none;\r\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n}\r\n\r\n.accordion-button {\r\n    background: #e9ecef;\r\n}\r\n\r\n.accordion-button:not(.collapsed) {\r\n    background: #dee2e6;\r\n}\r\n\r\n.question-item, .req-item {\r\n    padding: 8px;\r\n    border-bottom: 1px solid #eee;\r\n    cursor: pointer;\r\n}\r\n\r\n.question-item:hover, .req-item:hover {\r\n    background: #f1f3f5;\r\n}\r\n\r\n.answer-option {\r\n    padding: 8px;\r\n    margin: 5px;\r\n    background: #f8f9fa;\r\n    border: 1px solid #dee2e6;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n}\r\n\r\n.answer-option.selected {\r\n    background: #007bff;\r\n    color: white;\r\n}\r\n\r\n.answer-option:hover {\r\n    background: #e9ecef;\r\n}\r\n\r\n#filters .btn-outline-secondary, #req-filters .btn-outline-secondary {\r\n    margin-right: 5px;\r\n}\r\n\r\n#filters .btn-outline-secondary.active, #req-filters .btn-outline-secondary.active {\r\n    background: #007bff;\r\n    color: white;\r\n}\r\n\r\n.req-details {\r\n    font-size: 0.9em;\r\n    color: #6c757d;\r\n    margin-left: 20px;\r\n}\r\n\r\n.maintabcontent {\r\n    display: none;\r\n}\r\n\r\n.epic-req-item {\r\n    padding: 8px;\r\n    border-bottom: 1px solid #eee;\r\n}\r\n\r\n.epic-list-item {\r\n    padding: 10px;\r\n    margin-bottom: 5px;\r\n    background: #f8f9fa;\r\n    border: 1px solid #dee2e6;\r\n    border-radius: 4px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n\r\n.add-to-devops-btn {\r\n    padding: 5px 10px;\r\n    font-size: 0.9em;\r\n}"
  },
  {
    "path": "public",
    "filename": "test.html",
    "code": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Chore Assignment Wireframe</title>\r\n    <style>\r\n        body {\r\n            font-family: 'Segoe UI', Arial, sans-serif;\r\n            margin: 0;\r\n            padding: 0;\r\n            background-color: #f8f9fa;\r\n        }\r\n        .container {\r\n            display: flex;\r\n            flex-direction: column;\r\n            min-height: 100vh;\r\n            width: 100%;\r\n            max-width: 1280px;\r\n            margin: 0 auto;\r\n        }\r\n        .header {\r\n            background-color: #e9ecef;\r\n            padding: 20px;\r\n            text-align: left;\r\n            font-size: 20px;\r\n            font-weight: bold;\r\n            height: 60px;\r\n            box-sizing: border-box;\r\n        }\r\n        .content {\r\n            display: flex;\r\n            flex: 1;\r\n        }\r\n        .sidebar {\r\n            width: 20%;\r\n            background-color: #343a40;\r\n            color: white;\r\n            padding: 20px;\r\n            box-sizing: border-box;\r\n        }\r\n        .sidebar h3 {\r\n            font-size: 16px;\r\n            margin-top: 0;\r\n        }\r\n        .sidebar ul {\r\n            list-style-type: none;\r\n            padding: 0;\r\n            font-size: 14px;\r\n        }\r\n        .main {\r\n            width: 80%;\r\n            background-color: #f8f9fa;\r\n            padding: 20px;\r\n            box-sizing: border-box;\r\n        }\r\n        .form-section {\r\n            border: 1px solid #dee2e6;\r\n            padding: 20px;\r\n            background-color: white;\r\n            margin-bottom: 20px;\r\n        }\r\n        .form-section h3 {\r\n            font-size: 16px;\r\n            margin-top: 0;\r\n        }\r\n        .dropdown {\r\n            display: inline-block;\r\n            width: 200px;\r\n            padding: 10px;\r\n            border: 1px solid #dee2e6;\r\n            margin-right: 10px;\r\n            background-color: #fff;\r\n            font-size: 14px;\r\n        }\r\n        .button {\r\n            display: block;\r\n            width: 100px;\r\n            padding: 10px;\r\n            background-color: #007bff;\r\n            color: white;\r\n            text-align: center;\r\n            border: none;\r\n            margin: 10px auto 0;\r\n            cursor: pointer;\r\n        }\r\n        .recent-section {\r\n            padding: 20px;\r\n        }\r\n        .recent-section h3 {\r\n            font-size: 16px;\r\n            margin-top: 0;\r\n        }\r\n        .recent-section ul {\r\n            list-style-type: none;\r\n            padding: 0;\r\n            font-size: 14px;\r\n        }\r\n        .footer {\r\n            background-color: #e9ecef;\r\n            padding: 10px;\r\n            text-align: center;\r\n            font-size: 12px;\r\n            height: 40px;\r\n            box-sizing: border-box;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"header\">Family Chore App</div>\r\n        <div class=\"content\">\r\n            <div class=\"sidebar\">\r\n                <h3>Family Members</h3>\r\n                <ul>\r\n                    <li>John</li>\r\n                    <li>Jane</li>\r\n                    <li>Tim</li>\r\n                </ul>\r\n            </div>\r\n            <div class=\"main\">\r\n                <div class=\"form-section\">\r\n                    <h3>Assign a Chore</h3>\r\n                    <select class=\"dropdown\">\r\n                        <option>Wash Dishes</option>\r\n                        <option>Vacuum</option>\r\n                        <option>Laundry</option>\r\n                    </select>\r\n                    <select class=\"dropdown\">\r\n                        <option>John</option>\r\n                        <option>Jane</option>\r\n                        <option>Tim</option>\r\n                    </select>\r\n                    <button class=\"button\">Assign</button>\r\n                </div>\r\n                <div class=\"recent-section\">\r\n                    <h3>Recent Assignments</h3>\r\n                    <ul>\r\n                        <li>John: Wash Dishes</li>\r\n                        <li>Jane: Vacuum</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"footer\">© 2025 Family Chore</div>\r\n    </div>\r\n</body>\r\n</html>"
  },
  {
    "path": "public",
    "filename": "wireframe-viewer.html",
    "code": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Wireframe Viewer</title>\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n</head>\r\n<body>\r\n    <div class=\"wrapper\">\r\n        <nav id=\"sidebar\" class=\"sidebar\">\r\n            <div class=\"sidebar-header\">\r\n                <h3>Stakeholder AI</h3>\r\n            </div>\r\n            <ul class=\"list-unstyled components\">\r\n                <li><a href=\"#\" onclick=\"toggleSidebar()\">Toggle Sidebar</a></li>\r\n                <li><a href=\"/\">Requirements</a></li>\r\n                <li><a href=\"/wireframe-viewer\">Wireframes</a></li>\r\n                <li><a href=\"#\" id=\"download-json\">Download JSON</a></li>\r\n                <li><a href=\"#\" id=\"download-md\">Download Markdown</a></li>\r\n            </ul>\r\n        </nav>\r\n\r\n        <div id=\"content\" class=\"container-fluid\">\r\n            <h2 class=\"mt-4\">Wireframe Viewer</h2>\r\n            <div class=\"card p-3 mb-3\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"wireframe-name\" class=\"form-label\">Wireframe Name:</label>\r\n                    <input type=\"text\" id=\"wireframe-name\" class=\"form-control\" placeholder=\"e.g., chore-assignment\" required>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"requirement-desc\" class=\"form-label\">Requirement Description:</label>\r\n                    <textarea id=\"requirement-desc\" class=\"form-control\" rows=\"2\" placeholder=\"Enter requirement description\"></textarea>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"benefit\" class=\"form-label\">Benefit:</label>\r\n                    <input type=\"text\" id=\"benefit\" class=\"form-control\" placeholder=\"e.g., Reduces task assignment time by 20%\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"objective\" class=\"form-label\">Objective:</label>\r\n                    <input type=\"text\" id=\"objective\" class=\"form-control\" placeholder=\"e.g., Streamline task delegation\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"value\" class=\"form-label\">Value:</label>\r\n                    <input type=\"text\" id=\"value\" class=\"form-control\" placeholder=\"e.g., Improves family coordination\">\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"version-select\" class=\"form-label\">Previous Version (Optional):</label>\r\n                    <select id=\"version-select\" class=\"form-select\">\r\n                        <option value=\"\">None</option>\r\n                    </select>\r\n                </div>\r\n                <button id=\"generate-wireframe\" class=\"btn btn-primary mt-2\">Generate Wireframe</button>\r\n                <div class=\"form-group mt-3\">\r\n                    <label for=\"correction-prompt\" class=\"form-label\">Correction Prompt:</label>\r\n                    <textarea id=\"correction-prompt\" class=\"form-control\" rows=\"2\" placeholder=\"Enter correction prompt (optional)\"></textarea>\r\n                </div>\r\n                <button id=\"submit-correction\" class=\"btn btn-secondary mt-2\">Submit Correction</button>\r\n            </div>\r\n            <div id=\"wireframe-display\" class=\"mt-3\">\r\n                <h3>Wireframe Preview</h3>\r\n                <iframe id=\"wireframe-iframe\" style=\"width: 100%; height: 500px; border: 1px solid #dee2e6;\"></iframe>\r\n                <img id=\"wireframe-screenshot\" src=\"\" alt=\"Wireframe Screenshot\" style=\"width: 100%; max-height: 500px; display: none;\">\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n    <script>\r\n        document.getElementById('generate-wireframe').addEventListener('click', async () => {\r\n            const wireframeName = document.getElementById('wireframe-name').value.trim();\r\n            const requirement = {\r\n                description: document.getElementById('requirement-desc').value.trim(),\r\n                benefit: document.getElementById('benefit').value.trim(),\r\n                objective: document.getElementById('objective').value.trim(),\r\n                value: document.getElementById('value').value.trim()\r\n            };\r\n            const previousVersion = document.getElementById('version-select').value || null;\r\n\r\n            if (!wireframeName) {\r\n                alert('Please enter a wireframe name');\r\n                return;\r\n            }\r\n            if (!requirement.description) {\r\n                alert('Please enter a requirement description');\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await fetch('/api/generate-wireframe', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ requirement, wireframeName, previousVersion })\r\n                });\r\n                if (!response.ok) throw new Error(await response.text());\r\n                const { filename, screenshotFilename } = await response.json();\r\n                document.getElementById('wireframe-iframe').src = `/wireframe/${filename}`;\r\n                document.getElementById('wireframe-screenshot').src = `/wireframe/${screenshotFilename}`;\r\n                document.getElementById('wireframe-screenshot').style.display = 'block';\r\n                await loadVersions(wireframeName.toLowerCase().replace(/\\s+/g, '-'));\r\n            } catch (error) {\r\n                console.error('Wireframe Generation Error:', error);\r\n                alert('Failed to generate wireframe: ' + error.message);\r\n            }\r\n        });\r\n\r\n        document.getElementById('submit-correction').addEventListener('click', async () => {\r\n            const wireframeName = document.getElementById('wireframe-name').value.trim();\r\n            const correctionPrompt = document.getElementById('correction-prompt').value.trim();\r\n            const previousVersion = document.getElementById('version-select').value;\r\n            if (!wireframeName) {\r\n                alert('Please enter a wireframe name');\r\n                return;\r\n            }\r\n            if (!correctionPrompt || !previousVersion) {\r\n                alert('Please enter a correction prompt and select a previous version');\r\n                return;\r\n            }\r\n\r\n            const requirement = {\r\n                description: correctionPrompt,\r\n                benefit: document.getElementById('benefit').value.trim(),\r\n                objective: document.getElementById('objective').value.trim(),\r\n                value: document.getElementById('value').value.trim()\r\n            };\r\n\r\n            try {\r\n                const response = await fetch('/api/generate-wireframe', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ requirement, wireframeName, previousVersion })\r\n                });\r\n                if (!response.ok) throw new Error(await response.text());\r\n                const { filename, screenshotFilename } = await response.json();\r\n                document.getElementById('wireframe-iframe').src = `/wireframe/${filename}`;\r\n                document.getElementById('wireframe-screenshot').src = `/wireframe/${screenshotFilename}`;\r\n                document.getElementById('wireframe-screenshot').style.display = 'block';\r\n                await loadVersions(wireframeName.toLowerCase().replace(/\\s+/g, '-'));\r\n            } catch (error) {\r\n                console.error('Wireframe Correction Error:', error);\r\n                alert('Failed to correct wireframe: ' + error.message);\r\n            }\r\n        });\r\n\r\n        async function loadVersions(baseFilename) {\r\n            try {\r\n                const response = await fetch(`/api/wireframe-versions?baseFilename=${baseFilename}`);\r\n                if (!response.ok) throw new Error(await response.text());\r\n                const versions = await response.json();\r\n                const select = document.getElementById('version-select');\r\n                select.innerHTML = '<option value=\"\">None</option>' + versions.map(v => \r\n                    `<option value=\"${v.filename}\">${v.filename} (v${v.version})</option>`\r\n                ).join('');\r\n            } catch (error) {\r\n                console.error('Load Versions Error:', error);\r\n                alert('Failed to load wireframe versions: ' + error.message);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n</html>"
  },
  {
    "path": "server",
    "filename": "azure-devops.js",
    "code": "const axios = require('axios');\r\nrequire('dotenv').config();\r\n\r\nconst AZURE_DEVOPS_ORG = process.env.AZURE_DEVOPS_ORG;\r\nconst AZURE_DEVOPS_PROJECT = process.env.AZURE_DEVOPS_PROJECT;\r\nconst AZURE_DEVOPS_PAT = process.env.AZURE_DEVOPS_PAT;\r\nconst BASE_URL = `https://dev.azure.com/${AZURE_DEVOPS_ORG}`;\r\n\r\nconst headers = {\r\n    'Authorization': `Basic ${Buffer.from(`:${AZURE_DEVOPS_PAT}`).toString('base64')}`,\r\n    'Content-Type': 'application/json-patch+json'\r\n};\r\n\r\nclass AzureDevOpsAPI {\r\n    async createWorkItem(type, title, description = '', assignedAIAgent = null, parentId = null) {\r\n        const url = `${BASE_URL}/${AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/$${type}?api-version=7.1`;\r\n        const body = [\r\n            { op: 'add', path: '/fields/System.Title', value: title },\r\n            { op: 'add', path: '/fields/System.Description', value: description }\r\n        ];\r\n\r\n        if (assignedAIAgent) {\r\n            body.push({ op: 'add', path: '/fields/Custom.AssignedAIAgent', value: assignedAIAgent });\r\n        }\r\n\r\n        if (parentId) {\r\n            const parentUrl = `${BASE_URL}/_apis/wit/workItems/${parentId}`;\r\n            body.push({\r\n                op: 'add',\r\n                path: '/relations/-',\r\n                value: {\r\n                    rel: 'System.LinkTypes.Hierarchy-Reverse',\r\n                    url: parentUrl,\r\n                    attributes: { comment: 'Parent relation' }\r\n                }\r\n            });\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(url, body, { headers });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error creating work item:', error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getWorkItem(id) {\r\n        const url = `${BASE_URL}/${AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/${id}?api-version=7.1`;\r\n        try {\r\n            const response = await axios.get(url, { headers });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error retrieving work item:', error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateWorkItem(id, updates) {\r\n        const url = `${BASE_URL}/${AZURE_DEVOPS_PROJECT}/_apis/wit/workitems/${id}?api-version=7.1`;\r\n        try {\r\n            const response = await axios.patch(url, updates, { headers });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error updating work item:', error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = new AzureDevOpsAPI();"
  },
  {
    "path": "server",
    "filename": "ba-agent.js",
    "code": "const axios = require('axios');\r\nconst fs = require('fs-extra');\r\nconst { v4: uuidv4 } = require('uuid');\r\nrequire('dotenv').config();\r\n\r\nclass BusinessAnalystAgent {\r\n    constructor() {\r\n        this.apiKey = process.env.XAI_API_KEY;\r\n        this.baseUrl = 'https://api.x.ai/v1';\r\n        this.model = process.env.GROK_MODEL || 'grok-2-1212';\r\n        this.requirementCounter = 0;\r\n        this.questionCounter = 0;\r\n        this.stoppedTopics = new Set();\r\n    }\r\n\r\n    async processVisionAndScope(projectName, vision, scope) {\r\n        try {\r\n            const prompt = `\r\n                You are a Business Analyst aligning with SAFe principles. Given the vision: \"${vision}\" and scope: \"${scope}\", create a set of detailed requirements to support the application’s functionality. Each requirement must specify:\r\n                - \"text\": A description of the requirement, including entities (e.g., User, Chore), processes (e.g., Log Chore), or attributes (e.g., Chore Name) where applicable.\r\n                - \"benefit\": A measurable outcome (why it matters, e.g., \"Reduces task assignment time by 20%\").\r\n                - \"objective\": The goal it achieves (what it accomplishes, e.g., \"Streamline task delegation\").\r\n                - \"value\": How it contributes to the business or user (e.g., \"Improves family coordination\").\r\n                Include a process, associated entity, and use case where relevant. Do not limit the number of requirements.\r\n\r\n                Additionally, create follow-up questions about the logical requirements (not technical implementation) and assign each to either the \"Stakeholder\" or an agent (\"UX Designer\", \"Solution Architect\", \"Tech Advisor\"). Limit questions to no more than 2 per logical topic (e.g., user management, data handling). For each question, provide up to 5 potential answer options.\r\n\r\n                Return a plain JSON object with two top-level keys:\r\n                - \"requirements\": an array of objects with \"text\", \"benefit\", \"objective\", \"value\", and optionally \"process\", \"entity\", \"useCase\".\r\n                - \"questions\": an array of objects with \"text\", \"to\", \"topic\", and \"options\" (an array of up to 5 potential answer strings).\r\n                Ensure \"requirements\" and \"questions\" are separate arrays at the root level, and the output is strictly valid JSON with no extra text, Markdown, or comments.\r\n            `;\r\n            const response = await this.callGrok(prompt);\r\n            console.log('Grok Response (Vision/Scope):', response.data);\r\n\r\n            let content = response.data.choices[0].message.content.trim();\r\n            console.log('Raw Content (Vision/Scope):', content);\r\n\r\n            content = content.replace(/```json\\s*/, '').replace(/\\s*```/, '').trim();\r\n            let data;\r\n            try {\r\n                data = JSON.parse(content);\r\n                console.log('Parsed Data (Vision/Scope):', data);\r\n            } catch (parseError) {\r\n                console.error('JSON Parse Error (Vision/Scope):', parseError.message);\r\n                throw new Error('Grok returned invalid JSON');\r\n            }\r\n\r\n            if (!data.requirements || !data.questions) {\r\n                console.warn('Grok returned incomplete data:', data);\r\n                throw new Error('Grok response missing required elements');\r\n            }\r\n\r\n            return {\r\n                projectName,\r\n                vision,\r\n                scope,\r\n                requirements: data.requirements.map(r => ({ \r\n                    internalId: uuidv4(),\r\n                    id: `R-${++this.requirementCounter}`, \r\n                    text: r.text, \r\n                    benefit: r.benefit || 'Not specified',\r\n                    objective: r.objective || 'Not specified',\r\n                    value: r.value || 'Not specified',\r\n                    process: r.process || '', \r\n                    entity: r.entity || '', \r\n                    useCase: r.useCase || '' \r\n                })),\r\n                questions: data.questions.map(q => ({ \r\n                    internalId: uuidv4(),\r\n                    id: `Q-${++this.questionCounter}`, \r\n                    text: q.text, \r\n                    to: q.to, \r\n                    topic: q.topic, \r\n                    options: Array.isArray(q.options) ? q.options : [], \r\n                    status: 'Open' \r\n                })),\r\n                stoppedTopics: [],\r\n                promptHistory: []\r\n            };\r\n        } catch (error) {\r\n            console.error('Error in processVisionAndScope:', error.message, error.stack);\r\n            throw new Error('Failed to process vision and scope');\r\n        }\r\n    }\r\n\r\n    async processAnswer(projectData, questionId, answer) {\r\n        try {\r\n            const question = projectData.questions.find(q => q.internalId === questionId);\r\n            if (!question) throw new Error('Question not found');\r\n            question.status = 'Resolved';\r\n            question.answer = answer;\r\n\r\n            if (this.stoppedTopics.has(question.topic)) return projectData;\r\n\r\n            const prompt = `\r\n                Given the resolved question \"${question.text}\" assigned to \"${question.to}\" with answer \"${answer}\", analyze the logical impact on the application using SAFe principles. Generate new requirements or questions as needed, focusing on logical aspects (entities, processes, attributes). For requirements, specify:\r\n                - \"text\": The requirement description, including entities, processes, or attributes where applicable.\r\n                - \"benefit\": A measurable outcome (why it matters).\r\n                - \"objective\": The goal it achieves.\r\n                - \"value\": How it contributes to the business or user.\r\n                Include a process, associated entity, and use case where relevant. Assign questions to either \"Stakeholder\" or an agent (\"UX Designer\", \"Solution Architect\", \"Tech Advisor\"), and specify the \"topic\". Limit new questions to 1 per topic. For each new question, provide up to 5 potential answer options.\r\n\r\n                Return a plain JSON object with two top-level keys:\r\n                - \"requirements\": an array of objects with \"text\", \"benefit\", \"objective\", \"value\", and optionally \"process\", \"entity\", \"useCase\".\r\n                - \"questions\": an array of objects with \"text\", \"to\", \"topic\", and \"options\" (an array of up to 5 potential answer strings).\r\n                Ensure \"requirements\" and \"questions\" are separate arrays at the root level, and the output is strictly valid JSON with no extra text, Markdown, or comments.\r\n            `;\r\n            const response = await this.callGrok(prompt);\r\n            console.log('Grok Answer Response:', response.data);\r\n\r\n            let content = response.data.choices[0].message.content.trim();\r\n            console.log('Raw Content (Answer):', content);\r\n\r\n            content = content.replace(/```json\\s*/, '').replace(/\\s*```/, '').trim();\r\n            let newData;\r\n            try {\r\n                newData = JSON.parse(content);\r\n                console.log('Parsed newData (Answer):', newData);\r\n            } catch (parseError) {\r\n                console.error('JSON Parse Error in Answer:', parseError.message);\r\n                throw new Error('Grok returned invalid JSON for answer');\r\n            }\r\n\r\n            const requirements = Array.isArray(newData.requirements) ? newData.requirements : [];\r\n            const questions = Array.isArray(newData.questions) ? newData.questions : [];\r\n\r\n            console.log('Processed Requirements:', requirements);\r\n            console.log('Processed Questions:', questions);\r\n\r\n            if (requirements.length > 0) {\r\n                projectData.requirements.push(...requirements.map(r => ({ \r\n                    internalId: uuidv4(),\r\n                    id: `R-${++this.requirementCounter}`, \r\n                    text: r.text, \r\n                    benefit: r.benefit || 'Not specified',\r\n                    objective: r.objective || 'Not specified',\r\n                    value: r.value || 'Not specified',\r\n                    process: r.process || '', \r\n                    entity: r.entity || '', \r\n                    useCase: r.useCase || '' \r\n                })));\r\n            }\r\n            if (questions.length > 0) {\r\n                projectData.questions.push(...questions.map(q => ({ \r\n                    internalId: uuidv4(),\r\n                    id: `Q-${++this.questionCounter}`, \r\n                    text: q.text, \r\n                    to: q.to, \r\n                    topic: q.topic, \r\n                    options: Array.isArray(q.options) ? q.options : [], \r\n                    status: 'Open' \r\n                })));\r\n            }\r\n            console.log('Updated projectData before Markdown:', projectData);\r\n            return projectData;\r\n        } catch (error) {\r\n            console.error('Error in processAnswer:', error.message, error.stack);\r\n            throw new Error('Failed to process answer');\r\n        }\r\n    }\r\n\r\n    async addRequirements(projectData, promptText) {\r\n        try {\r\n            const prompt = `\r\n                Given the existing project with vision: \"${projectData.vision}\" and scope: \"${projectData.scope}\", and the additional prompt: \"${promptText}\", generate new requirements to enhance the application using SAFe principles. Specify:\r\n                - \"text\": The requirement description, including entities (e.g., User, Chore), processes (e.g., Log Chore), or attributes (e.g., Chore Name) where applicable.\r\n                - \"benefit\": A measurable outcome (why it matters).\r\n                - \"objective\": The goal it achieves.\r\n                - \"value\": How it contributes to the business or user.\r\n                Include a process, associated entity, and use case if relevant.\r\n\r\n                Return a plain JSON object with one top-level key:\r\n                - \"requirements\": an array of objects with \"text\", \"benefit\", \"objective\", \"value\", and optionally \"process\", \"entity\", \"useCase\".\r\n                Ensure the output is strictly valid JSON with no extra text, Markdown, or comments.\r\n            `;\r\n            const response = await this.callGrok(prompt);\r\n            console.log('Grok Prompt Response:', response.data);\r\n\r\n            let content = response.data.choices[0].message.content.trim();\r\n            console.log('Raw Content (Prompt):', content);\r\n\r\n            content = content.replace(/```json\\s*/, '').replace(/\\s*```/, '').trim();\r\n            let newData;\r\n            try {\r\n                newData = JSON.parse(content);\r\n                console.log('Parsed newData (Prompt):', newData);\r\n            } catch (parseError) {\r\n                console.error('JSON Parse Error in Prompt:', parseError.message);\r\n                throw new Error('Grok returned invalid JSON for prompt');\r\n            }\r\n\r\n            const requirements = Array.isArray(newData.requirements) ? newData.requirements : [];\r\n            if (requirements.length > 0) {\r\n                projectData.requirements.push(...requirements.map(r => ({ \r\n                    internalId: uuidv4(),\r\n                    id: `R-${++this.requirementCounter}`, \r\n                    text: r.text, \r\n                    benefit: r.benefit || 'Not specified',\r\n                    objective: r.objective || 'Not specified',\r\n                    value: r.value || 'Not specified',\r\n                    process: r.process || '', \r\n                    entity: r.entity || '', \r\n                    useCase: r.useCase || '' \r\n                })));\r\n                projectData.promptHistory.push(promptText);\r\n            }\r\n            return projectData;\r\n        } catch (error) {\r\n            console.error('Error in addRequirements:', error.message, error.stack);\r\n            throw new Error('Failed to add requirements');\r\n        }\r\n    }\r\n\r\n    async clarifyRequirement(projectData, reqId, promptText) {\r\n        try {\r\n            const requirement = projectData.requirements.find(r => r.internalId === reqId);\r\n            if (!requirement) throw new Error('Requirement not found');\r\n            const prompt = `\r\n                Given the requirement \"${requirement.text}\" (Benefit: ${requirement.benefit}, Objective: ${requirement.objective}, Value: ${requirement.value})${requirement.process ? ' (Process: ' + requirement.process + ')' : ''}${requirement.entity ? ' (Entity: ' + requirement.entity + ')' : ''}${requirement.useCase ? ' (Use Case: ' + requirement.useCase + ')' : ''}, and the clarification prompt: \"${promptText}\", provide additional details or refinements to this requirement using SAFe principles. Specify:\r\n                - \"text\": The refined requirement description.\r\n                - \"benefit\": A measurable outcome.\r\n                - \"objective\": The goal it achieves.\r\n                - \"value\": How it contributes to the business or user.\r\n                Include a process, associated entity, and use case where applicable.\r\n\r\n                Return a plain JSON object with one top-level key:\r\n                - \"requirements\": an array of objects with \"text\", \"benefit\", \"objective\", \"value\", and optionally \"process\", \"entity\", \"useCase\".\r\n                Ensure the output is strictly valid JSON with no extra text, Markdown, or comments.\r\n            `;\r\n            const response = await this.callGrok(prompt);\r\n            console.log('Grok Clarify Response:', response.data);\r\n\r\n            let content = response.data.choices[0].message.content.trim();\r\n            console.log('Raw Content (Clarify):', content);\r\n\r\n            content = content.replace(/```json\\s*/, '').replace(/\\s*```/, '').trim();\r\n            let newData;\r\n            try {\r\n                newData = JSON.parse(content);\r\n                console.log('Parsed newData (Clarify):', newData);\r\n            } catch (parseError) {\r\n                console.error('JSON Parse Error in Clarify:', parseError.message);\r\n                throw new Error('Grok returned invalid JSON for clarification');\r\n            }\r\n\r\n            const requirements = Array.isArray(newData.requirements) ? newData.requirements : [];\r\n            if (requirements.length > 0) {\r\n                projectData.requirements.push(...requirements.map(r => ({ \r\n                    internalId: uuidv4(),\r\n                    id: `R-${++this.requirementCounter}`, \r\n                    text: r.text, \r\n                    benefit: r.benefit || 'Not specified',\r\n                    objective: r.objective || 'Not specified',\r\n                    value: r.value || 'Not specified',\r\n                    process: r.process || '', \r\n                    entity: r.entity || '', \r\n                    useCase: r.useCase || '' \r\n                })));\r\n                projectData.promptHistory.push(`Clarification for ${requirement.id}: ${promptText}`);\r\n            }\r\n            return projectData;\r\n        } catch (error) {\r\n            console.error('Error in clarifyRequirement:', error.message, error.stack);\r\n            throw new Error('Failed to clarify requirement');\r\n        }\r\n    }\r\n\r\n    stopQuestionLine(projectData, questionId) {\r\n        const question = projectData.questions.find(q => q.internalId === questionId);\r\n        if (question) {\r\n            this.stoppedTopics.add(question.topic);\r\n            projectData.stoppedTopics = Array.from(this.stoppedTopics);\r\n        }\r\n        return projectData;\r\n    }\r\n\r\n    async callGrok(prompt) {\r\n        try {\r\n            const response = await axios.post(`${this.baseUrl}/chat/completions`, {\r\n                model: this.model,\r\n                messages: [{ role: 'user', content: prompt }],\r\n                max_tokens: parseInt(process.env.MAX_TOKENS, 10)\r\n            }, {\r\n                headers: { \r\n                    'Authorization': `Bearer ${this.apiKey}`, \r\n                    'Content-Type': 'application/json' \r\n                }\r\n            });\r\n            return response;\r\n        } catch (error) {\r\n            console.error('Grok API Call Failed:', error.message, error.response?.data);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async updateMarkdown(filePath, projectData) {\r\n        try {\r\n            console.log('Generating Markdown for projectData:', projectData);\r\n            const mdContent = `# Project: ${projectData.projectName}\\n\\n## Vision\\n${projectData.vision}\\n\\n## Scope\\n${projectData.scope}\\n\\n## Requirements\\n${projectData.requirements.map(r => \r\n                `- ${r.id}: ${r.text}${r.epic ? ' [Epic: ' + r.epic + ']' : ''}\\n  - Benefit: ${r.benefit}\\n  - Objective: ${r.objective}\\n  - Value: ${r.value}${r.process ? '\\n  - Process: ' + r.process : ''}${r.entity ? '\\n  - Entity: ' + r.entity : ''}${r.useCase ? '\\n  - Use Case: ' + r.useCase : ''}`\r\n            ).join('\\n')}\\n\\n## Questions\\n${projectData.questions.map(q => {\r\n                const options = Array.isArray(q.options) ? q.options : [];\r\n                return `- ${q.id}: ${q.text} (To: ${q.to}, Topic: ${q.topic}, ${q.status}${q.answer ? ', Answer: ' + q.answer : ''}${options.length ? ', Options: ' + options.join(', ') : ''})`;\r\n            }).join('\\n')}\\n\\n## Epics\\n${(projectData.epics || []).map(e => `- ${e.name}: ${e.requirementIds.map(id => projectData.requirements.find(r => r.internalId === id)?.id).join(', ')}`).join('\\n')}\\n\\n## Prompt History\\n${projectData.promptHistory.join('\\n')}\\n\\n## Stopped Topics\\n${projectData.stoppedTopics.join(', ')}`;\r\n            await fs.writeFile(filePath, mdContent);\r\n        } catch (error) {\r\n            console.error('Error in updateMarkdown:', error.message, error.stack);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = { BusinessAnalystAgent };"
  },
  {
    "path": "server\\controllers",
    "filename": "artifact-generation.js",
    "code": "const fs = require('fs-extra');\r\nconst path = require('path');\r\n\r\nexports.generateWireframe = async (req, res) => {\r\n    const { screens } = req.body;\r\n    const wireframe = `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>${screens[0].name}</title>\r\n    <style>body{background:#f8f9fa}.main{padding:20px}button{background:#007bff;color:#fff}</style>\r\n</head>\r\n<body>\r\n    <div class=\"main\">\r\n        <h2>${screens[0].purpose}</h2>\r\n        <button>Action</button>\r\n    </div>\r\n</body>\r\n</html>`;\r\n    const filename = `${screens[0].name}.html`;\r\n    await fs.writeFile(path.join('public', filename), wireframe);\r\n    res.status(200).json({ filename });\r\n};\r\n\r\n// Add similar methods for architecture, specs, tasks, test cases\r\n"
  },
  {
    "path": "server\\controllers",
    "filename": "requirement-analyst.js",
    "code": "exports.categorizeRequirement = async (req, res) => {\r\n    const { requirement } = req.body;\r\n    if (!requirement || !requirement.description) {\r\n        return res.status(400).json({ error: 'Requirement with description is required' });\r\n    }\r\n    const categorized = {\r\n        id: requirement.id || `R-${Date.now()}`, // Use existing id if provided, else generate\r\n        category: requirement.description.includes('interface') ? 'UI' : 'Data',\r\n        description: requirement.description,\r\n        benefit: requirement.benefit || 'Unknown',\r\n        objective: requirement.objective || 'Unknown',\r\n        value: requirement.value || 'Unknown'\r\n    };\r\n    res.status(200).json([categorized]);\r\n};"
  },
  {
    "path": "server\\controllers",
    "filename": "screen-design.js",
    "code": "exports.identifyScreens = async (req, res) => {\r\n    const { requirements, components } = req.body;\r\n    if (!requirements || !Array.isArray(requirements) || !components || !Array.isArray(components)) {\r\n        return res.status(400).json({ error: 'Requirements and components must be non-empty arrays' });\r\n    }\r\n    const screens = requirements\r\n        .filter(r => r.category === 'UI')\r\n        .map(r => ({\r\n            name: `${r.description.split(' ')[0].toLowerCase()}-screen`,\r\n            purpose: `Support ${r.description}`,\r\n            reqId: r.id\r\n        }));\r\n    res.status(200).json(screens);\r\n};"
  },
  {
    "path": "server\\controllers",
    "filename": "system-design.js",
    "code": "exports.decomposeSystem = async (req, res) => {\r\n    const { requirements } = req.body;\r\n    if (!requirements || !Array.isArray(requirements) || requirements.length === 0) {\r\n        return res.status(400).json({ error: 'Requirements must be a non-empty array of objects' });\r\n    }\r\n    if (!requirements.every(r => r.description)) {\r\n        return res.status(400).json({ error: 'Each requirement must have a description' });\r\n    }\r\n    const components = requirements.map(req => ({\r\n        frontend: req.category === 'UI' ? `${req.description.split(' ')[0].toLowerCase()}-screen.html` : null,\r\n        backend: `${req.description.split(' ')[0].toLowerCase()}.js`,\r\n        database: 'Project model'\r\n    }));\r\n    res.status(200).json(components);\r\n};\r\n\r\nexports.mapRequirements = async (req, res) => {\r\n    const { requirements, components } = req.body;\r\n    if (!requirements || !Array.isArray(requirements) || !components || !Array.isArray(components)) {\r\n        return res.status(400).json({ error: 'Requirements and components must be non-empty arrays' });\r\n    }\r\n    if (requirements.length !== components.length) {\r\n        return res.status(400).json({ error: 'Requirements and components arrays must have the same length' });\r\n    }\r\n    const matrix = requirements.map((req, i) => ({\r\n        reqId: req.id,\r\n        component: components[i]\r\n    }));\r\n    res.status(200).json(matrix);\r\n};"
  },
  {
    "path": "server",
    "filename": "server.js",
    "code": "const express = require('express');\r\nconst path = require('path');\r\nconst fs = require('fs-extra');\r\nconst { BusinessAnalystAgent } = require('./ba-agent');\r\nconst azureDevOpsAPI = require('./azure-devops');\r\nconst WireframeGenerator = require('./wireframe-generator');\r\nconst Orchestrator = require('./services/orchestrator');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\nconst port = 3000;\r\nconst baAgent = new BusinessAnalystAgent();\r\nconst wireframeGenerator = new WireframeGenerator(baAgent);\r\nconst orchestrator = new Orchestrator(baAgent); // Pass Grok instance\r\nconst WIREFRAMES_DIR = process.env.WIREFRAMES_DIR || './wireframes';\r\n\r\napp.use(express.json());\r\napp.use(express.static(path.join(__dirname, '../public')));\r\n\r\nlet projectFile = path.join(__dirname, 'documents/project.json');\r\nlet mdFile = path.join(__dirname, 'documents/project.md');\r\n\r\napp.post('/api/submit', async (req, res) => {\r\n    try {\r\n        const { projectName, vision, scope } = req.body;\r\n        projectFile = path.join(__dirname, 'documents', `${projectName}.json`);\r\n        mdFile = path.join(__dirname, 'documents', `${projectName}.md`);\r\n        const projectData = await baAgent.processVisionAndScope(projectName, vision, scope);\r\n        await fs.writeJson(projectFile, projectData, { spaces: 2 });\r\n        await baAgent.updateMarkdown(mdFile, projectData);\r\n        res.status(200).send('Project initialized');\r\n    } catch (error) {\r\n        console.error('Submit Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to process submission' });\r\n    }\r\n});\r\n\r\napp.post('/api/answer', async (req, res) => {\r\n    try {\r\n        const { questionId, answer } = req.body;\r\n        const projectData = await fs.readJson(projectFile);\r\n        const updatedData = await baAgent.processAnswer(projectData, questionId, answer);\r\n        await fs.writeJson(projectFile, updatedData, { spaces: 2 });\r\n        await baAgent.updateMarkdown(mdFile, updatedData);\r\n        res.status(200).send('Answer processed');\r\n    } catch (error) {\r\n        console.error('Answer Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to process answer' });\r\n    }\r\n});\r\n\r\napp.post('/api/stop-questions', async (req, res) => {\r\n    try {\r\n        const { questionId } = req.body;\r\n        const projectData = await fs.readJson(projectFile);\r\n        const updatedData = baAgent.stopQuestionLine(projectData, questionId);\r\n        await fs.writeJson(projectFile, updatedData, { spaces: 2 });\r\n        await baAgent.updateMarkdown(mdFile, updatedData);\r\n        res.status(200).send('Question line stopped');\r\n    } catch (error) {\r\n        console.error('Stop Questions Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to stop questions' });\r\n    }\r\n});\r\n\r\napp.post('/api/add-requirements', async (req, res) => {\r\n    try {\r\n        const { prompt } = req.body;\r\n        const projectData = await fs.readJson(projectFile);\r\n        const updatedData = await baAgent.addRequirements(projectData, prompt);\r\n        await fs.writeJson(projectFile, updatedData, { spaces: 2 });\r\n        await baAgent.updateMarkdown(mdFile, updatedData);\r\n        res.status(200).send('Requirements added');\r\n    } catch (error) {\r\n        console.error('Add Requirements Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to add requirements' });\r\n    }\r\n});\r\n\r\napp.post('/api/clarify-requirement', async (req, res) => {\r\n    try {\r\n        const { reqId, prompt } = req.body;\r\n        const projectData = await fs.readJson(projectFile);\r\n        const updatedData = await baAgent.clarifyRequirement(projectData, reqId, prompt);\r\n        await fs.writeJson(projectFile, updatedData, { spaces: 2 });\r\n        await baAgent.updateMarkdown(mdFile, updatedData);\r\n        res.status(200).send('Requirement clarified');\r\n    } catch (error) {\r\n        console.error('Clarify Requirement Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to clarify requirement' });\r\n    }\r\n});\r\n\r\napp.post('/api/add-epic', async (req, res) => {\r\n    try {\r\n        const { epicName, requirementIds } = req.body;\r\n        const projectData = await fs.readJson(projectFile);\r\n        if (!projectData.epics) projectData.epics = [];\r\n        projectData.epics.push({ name: epicName, requirementIds });\r\n        projectData.requirements.forEach(r => {\r\n            if (requirementIds.includes(r.internalId)) r.epic = epicName;\r\n        });\r\n        await fs.writeJson(projectFile, projectData, { spaces: 2 });\r\n        await baAgent.updateMarkdown(mdFile, projectData);\r\n        res.status(200).send('Epic added');\r\n    } catch (error) {\r\n        console.error('Add Epic Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to add epic' });\r\n    }\r\n});\r\n\r\napp.get('/api/review', async (req, res) => {\r\n    try {\r\n        const projectData = await fs.readJson(projectFile);\r\n        res.json({\r\n            projectName: projectData.projectName,\r\n            requirements: projectData.requirements,\r\n            questions: projectData.questions,\r\n            epics: projectData.epics || [],\r\n            promptHistory: projectData.promptHistory\r\n        });\r\n    } catch (error) {\r\n        console.error('Review Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to load review data' });\r\n    }\r\n});\r\n\r\napp.get('/api/list-projects', async (req, res) => {\r\n    try {\r\n        const files = await fs.readdir(path.join(__dirname, 'documents'));\r\n        const jsonFiles = files.filter(file => file.endsWith('.json')).map(file => file.replace('.json', ''));\r\n        res.json(jsonFiles);\r\n    } catch (error) {\r\n        console.error('List Projects Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to list projects' });\r\n    }\r\n});\r\n\r\napp.post('/api/load-existing', async (req, res) => {\r\n    try {\r\n        const { projectName } = req.body;\r\n        projectFile = path.join(__dirname, 'documents', `${projectName}.json`);\r\n        mdFile = path.join(__dirname, 'documents', `${projectName}.md`);\r\n        if (await fs.pathExists(projectFile)) {\r\n            res.status(200).send('Project loaded');\r\n        } else {\r\n            res.status(404).json({ error: `Project ${projectName} not found` });\r\n        }\r\n    } catch (error) {\r\n        console.error('Load Existing Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to load existing project' });\r\n    }\r\n});\r\n\r\n\r\napp.post('/api/add-epic', async (req, res) => {\r\n    try {\r\n        const { epicName, requirementIds } = req.body;\r\n        const projectData = await fs.readJson(projectFile);\r\n        if (!projectData.epics) projectData.epics = [];\r\n        projectData.epics.push({ name: epicName, requirementIds });\r\n        projectData.requirements.forEach(r => {\r\n            if (requirementIds.includes(r.internalId)) r.epic = epicName;\r\n        });\r\n        await fs.writeJson(projectFile, projectData, { spaces: 2 });\r\n        await baAgent.updateMarkdown(mdFile, projectData);\r\n        res.status(200).send('Epic added');\r\n    } catch (error) {\r\n        console.error('Add Epic Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to add epic' });\r\n    }\r\n});\r\n\r\napp.post('/api/add-epic-to-devops', async (req, res) => {\r\n    try {\r\n        const { epicName, requirementIds } = req.body;\r\n        const projectData = await fs.readJson(projectFile);\r\n        const epicRequirements = projectData.requirements.filter(r => requirementIds.includes(r.internalId));\r\n        const description = `Requirements:\\n${epicRequirements.map(r => `${r.id}: ${r.text}`).join('\\n')}`;\r\n        \r\n        const devOpsEpic = await azureDevOpsAPI.createWorkItem('Epic', epicName, description);\r\n        const epicIndex = projectData.epics.findIndex(e => e.name === epicName);\r\n        if (epicIndex !== -1) {\r\n            projectData.epics[epicIndex].devOpsId = devOpsEpic.id;\r\n            await fs.writeJson(projectFile, projectData, { spaces: 2 });\r\n            await baAgent.updateMarkdown(mdFile, projectData);\r\n        }\r\n        res.status(200).json({ devOpsId: devOpsEpic.id });\r\n    } catch (error) {\r\n        console.error('Add Epic to DevOps Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to add epic to DevOps' });\r\n    }\r\n});\r\n\r\napp.post('/api/generate-wireframe', async (req, res) => {\r\n    try {\r\n        const { requirement, wireframeName, previousVersion } = req.body;\r\n        if (!wireframeName) throw new Error('Wireframe name is required');\r\n        const { filename, screenshotFilename, version } = await wireframeGenerator.generateWireframe(requirement, wireframeName, previousVersion);\r\n        res.status(200).json({ filename, screenshotFilename, version });\r\n    } catch (error) {\r\n        console.error('Generate Wireframe Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to generate wireframe' });\r\n    }\r\n});\r\n\r\napp.get('/api/wireframe-versions', async (req, res) => {\r\n    try {\r\n        const { baseFilename } = req.query;\r\n        const versions = await wireframeGenerator.listVersions(baseFilename);\r\n        res.status(200).json(versions);\r\n    } catch (error) {\r\n        console.error('List Wireframe Versions Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to list wireframe versions' });\r\n    }\r\n});\r\n\r\n\r\n// Updated route to serve files from WIREFRAMES_DIR\r\napp.get('/wireframe/:filename', (req, res) => {\r\n    const filename = req.params.filename;\r\n    const filepath = path.join(WIREFRAMES_DIR, filename);\r\n    if (fs.existsSync(filepath)) {\r\n        res.sendFile(filepath, { root: process.cwd() });\r\n    } else {\r\n        res.status(404).send('Wireframe not found');\r\n    }\r\n});\r\n\r\n// Serve wireframe-viewer page\r\napp.get('/wireframe-viewer', (req, res) => {\r\n    res.sendFile(path.join(__dirname, '../public/wireframe-viewer.html'));\r\n});\r\n\r\n// Agent endpoints\r\nconst requirementAnalyst = require('./controllers/requirement-analyst');\r\nconst systemDesign = require('./controllers/system-design');\r\nconst screenDesign = require('./controllers/screen-design');\r\nconst artifactGeneration = require('./controllers/artifact-generation');\r\n\r\napp.post('/api/analyze-requirement', requirementAnalyst.categorizeRequirement);\r\napp.post('/api/decompose-system', systemDesign.decomposeSystem);\r\napp.post('/api/map-requirements', systemDesign.mapRequirements);\r\napp.post('/api/identify-screens', screenDesign.identifyScreens);\r\napp.post('/api/generate-wireframe', artifactGeneration.generateWireframe);\r\n\r\napp.get('/wireframe/:filename', (req, res) => {\r\n    const filename = req.params.filename;\r\n    const filepath = path.join(WIREFRAMES_DIR, filename);\r\n    if (fs.existsSync(filepath)) {\r\n        res.sendFile(filepath, { root: process.cwd() });\r\n    } else {\r\n        res.status(404).send('Wireframe not found');\r\n    }\r\n});\r\n\r\n// Updated orchestration endpoint to handle multiple requirements\r\napp.post('/api/orchestrate', async (req, res) => {\r\n    const { requirements } = req.body;\r\n\r\n    if (!Array.isArray(requirements) || requirements.length === 0) {\r\n        return res.status(400).json({ error: 'Requirements must be a non-empty array' });\r\n    }\r\n\r\n    requirements.forEach((requirement, index) => {\r\n        orchestrator.enqueue({\r\n            name: `analyze-${index}`,\r\n            data: { requirement },\r\n            next: [\r\n                {\r\n                    name: `decompose-${index}`,\r\n                    data: { requirements: null },\r\n                    next: [\r\n                        {\r\n                            name: `map-${index}`,\r\n                            data: { requirements: null, components: null },\r\n                            next: [\r\n                                {\r\n                                    name: `identify-${index}`,\r\n                                    data: { requirements: null, components: null },\r\n                                    next: [\r\n                                        {\r\n                                            name: `generate-${index}`,\r\n                                            data: { screens: null }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        });\r\n    });\r\n\r\n    try {\r\n        const results = await orchestrator.processQueue();\r\n        res.status(200).json(results);\r\n    } catch (error) {\r\n        console.error('Orchestration Error:', error);\r\n        res.status(500).json({ error: 'Failed to orchestrate tasks', details: error.message });\r\n    }\r\n});\r\n\r\napp.post('/api/ask-question', async (req, res) => {\r\n    try {\r\n        const { question } = req.body;\r\n        const projectData = await fs.readJson(projectFile);\r\n        const prompt = `Here is the current project data: ${JSON.stringify(projectData)}. The user has asked: \"${question}\". Please provide a detailed answer based on the project data.`;\r\n        const response = await baAgent.callGrok(prompt);\r\n        const answer = response.data.choices[0].message.content.trim();\r\n        res.status(200).json({ answer });\r\n    } catch (error) {\r\n        console.error('Ask Question Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to process question' });\r\n    }\r\n});\r\n\r\nconst workitemCreator = require('./workitemCreator');\r\n\r\napp.post('/api/create-workitems', async (req, res) => {\r\n    try {\r\n        const { epicName } = req.body;\r\n        if (!epicName) {\r\n            return res.status(400).json({ error: 'epicName is required' });\r\n        }\r\n        const result = await workitemCreator.createWorkItems(epicName);\r\n        res.status(200).json(result);\r\n    } catch (error) {\r\n        console.error('Create Work Items Error:', error.message);\r\n        res.status(500).json({ error: 'Failed to create work items' });\r\n    }\r\n});\r\n\r\napp.get('/api/download/json', (req, res) => res.download(projectFile));\r\napp.get('/api/download/md', (req, res) => res.download(mdFile));\r\n\r\napp.listen(port, () => console.log(`Server running on http://localhost:${port}`));\r\n"
  },
  {
    "path": "server\\services",
    "filename": "orchestrator.js",
    "code": "const axios = require('axios');\r\nconst fs = require('fs-extra');\r\nconst path = require('path');\r\n\r\n// Define the wireframes directory\r\nconst WIREFRAMES_DIR = path.join(__dirname, 'wireframe');\r\n\r\nclass Orchestrator {\r\n    constructor(grok) {\r\n        this.queue = [];\r\n        this.baseUrl = 'http://localhost:3000'; // Adjust as needed\r\n        this.grok = grok; // Grok instance passed from server.js\r\n        // Ensure the wireframes directory exists\r\n        fs.ensureDirSync(WIREFRAMES_DIR);\r\n    }\r\n\r\n    enqueue(task) {\r\n        this.queue.push(task);\r\n    }\r\n\r\n    async processQueue() {\r\n        const results = {};\r\n        while (this.queue.length > 0) {\r\n            const task = this.queue.shift();\r\n            console.log(`Executing task: ${task.name} with data:`, task.data);\r\n            try {\r\n                const result = await this.executeTask(task, results);\r\n                results[task.name] = result;\r\n                console.log(`Result for ${task.name}:`, result);\r\n\r\n                // Write result to Markdown file\r\n                await this.writeToMarkdown(task, result);\r\n\r\n                if (task.next) {\r\n                    let previousResult = result;\r\n                    let previousRequirements = task.name.includes('analyze') ? result : null;\r\n                    for (const nextTask of task.next) {\r\n                        const updatedData = { ...nextTask.data };\r\n                        if (nextTask.data.requirements === null) {\r\n                            updatedData.requirements = previousRequirements || results[`analyze-${task.name.split('-')[1]}`];\r\n                        }\r\n                        if (nextTask.data.components === null && task.name.includes('decompose')) {\r\n                            updatedData.components = previousResult;\r\n                        }\r\n                        if (nextTask.data.screens === null && task.name.includes('identify')) {\r\n                            updatedData.screens = previousResult;\r\n                        }\r\n\r\n                        nextTask.data = updatedData;\r\n                        console.log(`Processing next task: ${nextTask.name} with updated data:`, nextTask.data);\r\n\r\n                        const nextResult = await this.executeTask(nextTask, results);\r\n                        results[nextTask.name] = nextResult;\r\n                        console.log(`Result for ${nextTask.name}:`, nextResult);\r\n\r\n                        // Write next task result to Markdown file\r\n                        await this.writeToMarkdown(nextTask, nextResult);\r\n\r\n                        previousResult = nextResult;\r\n\r\n                        if (nextTask.next) {\r\n                            let nestedPreviousResult = nextResult;\r\n                            for (const nestedTask of nextTask.next) {\r\n                                const nestedData = { ...nestedTask.data };\r\n                                if (nestedData.requirements === null) {\r\n                                    nestedData.requirements = previousRequirements || results[`analyze-${task.name.split('-')[1]}`];\r\n                                }\r\n                                if (nestedData.components === null && nextTask.name.includes('decompose')) {\r\n                                    nestedData.components = nestedPreviousResult;\r\n                                }\r\n                                if (nestedData.screens === null && nextTask.name.includes('identify')) {\r\n                                    nestedData.screens = nestedPreviousResult;\r\n                                }\r\n\r\n                                nestedTask.data = nestedData;\r\n                                console.log(`Processing nested task: ${nestedTask.name} with updated data:`, nestedTask.data);\r\n                                const nestedResult = await this.executeTask(nestedTask, results);\r\n                                results[nestedTask.name] = nestedResult;\r\n                                console.log(`Result for ${nestedTask.name}:`, nestedResult);\r\n\r\n                                // Write nested task result to Markdown file\r\n                                await this.writeToMarkdown(nestedTask, nestedResult);\r\n\r\n                                nestedPreviousResult = nestedResult;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                console.error(`Failed task ${task.name}:`, error.response ? error.response.data : error.message);\r\n                throw error;\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    async writeToMarkdown(task, result) {\r\n        // Use epicName from task.data, default to 'default-epic' if not provided\r\n        const epicName = task.data.epicName || 'default-epic';\r\n        const filePath = path.join(WIREFRAMES_DIR, `${epicName}.md`);\r\n\r\n        // Format the result as a string (handle JSON or plain text)\r\n        let resultString = typeof result === 'object' ? JSON.stringify(result, null, 2) : result;\r\n\r\n        // Prepare Markdown content\r\n        const markdownContent = `## ${task.name}\\n\\`\\`\\`\\n${resultString}\\n\\`\\`\\`\\n\\n`;\r\n\r\n        // Append to the file (creates it if it doesn't exist)\r\n        await fs.appendFile(filePath, markdownContent);\r\n        console.log(`Wrote ${task.name} result to ${filePath}`);\r\n    }\r\n\r\n    async executeTask(task, previousResults) {\r\n        const { name, data } = task;\r\n        let prompt;\r\n\r\n        switch (true) {\r\n            case name.includes('analyze'):\r\n                prompt = `Given the requirement: \"${data.requirement.description}\" (Benefit: ${data.requirement.benefit}, Objective: ${data.requirement.objective}, Value: ${data.requirement.value}), categorize it by functionality (e.g., UI, Data, Integration). Return only the JSON array with one object containing id, category, description, benefit, objective, and value. Preserve the original id if provided.`;\r\n                break;\r\n            case name.includes('decompose'):\r\n                prompt = `Given the requirements: ${JSON.stringify(data.requirements)}, decompose the system into components (frontend, backend, database). Return a JSON array of component objects with frontend (e.g., screen.html), backend (e.g., service.js), and database (e.g., model name) fields.`;\r\n                break;\r\n            case name.includes('map'):\r\n                prompt = `Given the requirements: ${JSON.stringify(data.requirements)} and components: ${JSON.stringify(data.components)}, create a traceability matrix linking each requirement to its components. Return a JSON array of objects with reqId and component fields.`;\r\n                break;\r\n            case name.includes('identify'):\r\n                prompt = `Given the requirements: ${JSON.stringify(data.requirements)} and components: ${JSON.stringify(data.components)}, identify UI screens needed. Return a JSON array of screen objects with name, purpose, and reqId fields for UI-related requirements.`;\r\n                break;\r\n            case name.includes('generate'):\r\n                prompt = `Given the screens: ${JSON.stringify(data.screens)}, generate an HTML5 wireframe with inline CSS for the first screen. Follow a simple layout with header, sidebar, main content, and footer. Return the HTML code as a plain string. Save it to public/${data.screens[0].name}-v1.html.`;\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown task: ${name}`);\r\n        }\r\n\r\n        try {\r\n            const response = await this.grok.callGrok(prompt);\r\n            const result = response.data.choices[0].message.content.trim().replace(/```json\\n|```/g, '');\r\n\r\n            // For generate task, save wireframe to file (keeping original behavior)\r\n            if (name.includes('generate')) {\r\n                const filename = `${data.screens[0].name}-v1.html`;\r\n                await fs.writeFile(`public/${filename}`, result);\r\n                return { filename };\r\n            }\r\n\r\n            return result;\r\n        } catch (error) {\r\n            throw new Error(`Task ${name} failed: ${error.message}`);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Orchestrator;"
  },
  {
    "path": "server",
    "filename": "wireframe-generator.js",
    "code": "const fs = require('fs-extra');\r\nconst path = require('path');\r\nconst puppeteer = require('puppeteer');\r\nrequire('dotenv').config();\r\n\r\nconst WIREFRAMES_DIR = process.env.WIREFRAMES_DIR || './wireframes';\r\n\r\nclass WireframeGenerator {\r\n    constructor(grok) {\r\n        this.grok = grok;\r\n        fs.ensureDirSync(WIREFRAMES_DIR);\r\n    }\r\n\r\n    async generateWireframe(requirement, wireframeName, previousVersion = null) {\r\n        const prompt = previousVersion \r\n            ? `Given the previous wireframe version at \"${previousVersion}\" and the requirement: \"${requirement.description}\" (Benefit: ${requirement.benefit}, Objective: ${requirement.objective}, Value: ${requirement.value}), refine the wireframe HTML5 code based on the correction prompt provided in the requirement. Use a simple, standard web design layout with a header, sidebar, main content, and footer. Return only the HTML5 code with inline CSS as a plain string, no extra text or comments.`\r\n            : `Given the requirement: \"${requirement.description}\" (Benefit: ${requirement.benefit}, Objective: ${requirement.objective}, Value: ${requirement.value}), generate a wireframe HTML5 page for a web application. Use a simple, standard web design layout with a header, sidebar (for navigation or context), main content (for primary interaction), and footer. Include inline CSS for basic styling (e.g., layout, colors). Return only the HTML5 code as a plain string, no extra text or comments.`;\r\n\r\n        const response = await this.grok.callGrok(prompt);\r\n        const htmlContent = response.data.choices[0].message.content.trim();\r\n\r\n        // Sanitize and use wireframeName as base filename\r\n        const baseFilename = wireframeName\r\n            .toLowerCase()\r\n            .replace(/\\s+/g, '-') // Replace spaces with hyphens\r\n            .replace(/[^a-z0-9-]/g, '') // Remove special characters\r\n            .substring(0, 30); // Limit to 30 characters\r\n        const version = await this.getNextVersion(baseFilename);\r\n        const filename = `${baseFilename}-v${version}.html`;\r\n        const filepath = path.join(WIREFRAMES_DIR, filename);\r\n\r\n        await fs.writeFile(filepath, htmlContent);\r\n\r\n        const screenshotFilename = `${baseFilename}-v${version}.png`;\r\n        const screenshotPath = await this.captureScreenshot(filepath, screenshotFilename);\r\n\r\n        return { filename, screenshotFilename, version };\r\n    }\r\n\r\n    async getNextVersion(baseFilename) {\r\n        const files = await fs.readdir(WIREFRAMES_DIR);\r\n        const versions = files\r\n            .filter(f => f.startsWith(baseFilename) && f.endsWith('.html'))\r\n            .map(f => parseInt(f.match(/v(\\d+)\\.html$/)[1]))\r\n            .sort((a, b) => b - a);\r\n        return versions.length ? versions[0] + 1 : 1;\r\n    }\r\n\r\n    async captureScreenshot(htmlPath, screenshotFilename) {\r\n        const browser = await puppeteer.launch({ headless: true });\r\n        const page = await browser.newPage();\r\n        await page.setViewport({ width: 1280, height: 720 });\r\n        await page.goto(`file://${path.resolve(htmlPath)}`, { waitUntil: 'networkidle0' });\r\n        const screenshotPath = path.join(WIREFRAMES_DIR, screenshotFilename);\r\n        await page.screenshot({ path: screenshotPath });\r\n        await browser.close();\r\n        return screenshotPath;\r\n    }\r\n\r\n    async listVersions(baseFilename) {\r\n        const files = await fs.readdir(WIREFRAMES_DIR);\r\n        return files\r\n            .filter(f => f.startsWith(baseFilename) && f.endsWith('.html'))\r\n            .map(f => ({\r\n                filename: f,\r\n                version: parseInt(f.match(/v(\\d+)\\.html$/)[1]),\r\n                screenshot: f.replace('.html', '.png')\r\n            }))\r\n            .sort((a, b) => a.version - b.version);\r\n    }\r\n}\r\n\r\nmodule.exports = WireframeGenerator;"
  },
  {
    "path": "server",
    "filename": "workitemCreator.js",
    "code": "const fs = require('fs');\r\nconst path = require('path');\r\nconst azureDevOpsAPI = require('./azure-devops');\r\nconst WIREFRAMES_DIR = process.env.WIREFRAMES_DIR || './wireframes';\r\n\r\nfunction parseMarkdown(markdown) {\r\n    try{\r\n        const sections = {};\r\n        let currentSection = null;\r\n        const lines = markdown.split('\\n');\r\n        \r\n        lines.forEach(line => {\r\n            if (line.startsWith('## ')) {\r\n                currentSection = line.substring(3).trim();\r\n                sections[currentSection] = '';\r\n            } else if (currentSection) {\r\n                sections[currentSection] += line + '\\n';\r\n            }\r\n        });\r\n    \r\n        const data = {};\r\n        for (const section in sections) {\r\n            const match = section.match(/(analyze|decompose|map)-(\\d+)/);\r\n            if (match) {\r\n                const type = match[1];\r\n                const index = match[2];\r\n                if (!data[index]) data[index] = {};\r\n                const content = sections[section];\r\n                const jsonContent = extractJsonFromSection(content);\r\n                data[index][type] = jsonContent;\r\n            }\r\n        }\r\n        return data;\r\n    \r\n    } catch(error){\r\n        throw new Error(`Failed to reading Markdown: ${error.message}`);\r\n    }\r\n}\r\n\r\nfunction extractJsonFromSection(content) {\r\n    const codeBlockMatch = content.match(/```(.*?)```/s);\r\n    if (!codeBlockMatch) throw new Error('No code block found in section');\r\n    const codeBlock = codeBlockMatch[1].trim();\r\n\r\n    // Find JSON boundaries\r\n    const startIndex = codeBlock.search(/[{[]/);\r\n    if (startIndex === -1) throw new Error('No JSON object or array found');\r\n    const endIndex = Math.max(codeBlock.lastIndexOf('}'), codeBlock.lastIndexOf(']'));\r\n    if (endIndex === -1) throw new Error('No closing bracket found');\r\n\r\n    const jsonString = codeBlock.substring(startIndex, endIndex + 1);\r\n    console.log('Extracted JSON string:', jsonString); // Log for verification\r\n\r\n    try {\r\n        return parseJsonWithComments(jsonString);\r\n    } catch (error) {\r\n        throw new Error(`Failed to parse JSON in section: ${error.message}`);\r\n    }\r\n}\r\n\r\nfunction parseJsonWithComments(jsonString) {\r\n    // Remove single-line comments (// comment)\r\n    const cleanedString = jsonString.replace(/\\/\\/.*$/gm, '');\r\n    \r\n    // Parse the cleaned JSON\r\n    try {\r\n        return JSON.parse(cleanedString);\r\n    } catch (error) {\r\n        throw new Error(`Failed to parse JSON: ${error.message}`);\r\n    }\r\n}\r\n\r\nfunction getComponentNames(components, key) {\r\n    if (!components[key]) return [];\r\n    return components[key].map(item => typeof item === 'string' ? item : item.name || item.file || 'unknown');\r\n}\r\n\r\nasync function createWorkItems(epicName) {\r\n    const markdownPath = path.join(WIREFRAMES_DIR, `${epicName}.md`);\r\n    if (!fs.existsSync(markdownPath)) {\r\n        throw new Error(`Markdown file for epic ${epicName} not found`);\r\n    }\r\n    const markdown = fs.readFileSync(markdownPath, 'utf8');\r\n    const data = parseMarkdown(markdown);\r\n\r\n    // Create Epic\r\n    const epicDescription = 'Build a system to manage family chores, enabling user registration, family creation, chore logging, assignment, and visibility control, with offline support and custom lists for enhanced coordination and privacy.';\r\n    const epic = await azureDevOpsAPI.createWorkItem('Epic', epicName, epicDescription, 'Product Owner');\r\n    const epicId = epic.id;\r\n\r\n    // Create Feature under Epic\r\n    const featureDescription = 'Deliver the core capabilities of the Family Chore Management System, including user authentication, family management, chore management, and system features like offline support and data privacy.';\r\n    const feature = await azureDevOpsAPI.createWorkItem('Feature', 'Implement Core Functionalities', featureDescription, 'Product Owner', epicId);\r\n    const featureId = feature.id;\r\n\r\n    // Process each requirement\r\n    for (const index in data) {\r\n        const requirement = data[index]['analyze'][0]; // Assuming single requirement per section\r\n        const components = data[index]['decompose'][0]; // Assuming single decomposition per section\r\n\r\n        // Create User Story\r\n        const userStoryTitle = `Implement requirement ${requirement.id}: ${requirement.description}`;\r\n        const userStoryDescription = `\r\nRequirement ID: ${requirement.id}\r\nCategory: ${requirement.category}\r\nDescription: ${requirement.description}\r\nBenefit: ${requirement.benefit}\r\nObjective: ${requirement.objective}\r\nValue: ${requirement.value}\r\n        `.trim();\r\n        const userStory = await azureDevOpsAPI.createWorkItem('User Story', userStoryTitle, userStoryDescription, 'Product Owner', featureId);\r\n        const userStoryId = userStory.id;\r\n\r\n        // Extract component names\r\n        const frontendNames = getComponentNames(components, 'frontend');\r\n        const backendNames = getComponentNames(components, 'backend');\r\n        const databaseNames = getComponentNames(components, 'database');\r\n\r\n        // Create Tasks\r\n        await azureDevOpsAPI.createWorkItem('Task', 'Create Wireframes', `Design wireframes for ${frontendNames.join(', ')}`, 'UX Designer', userStoryId);\r\n        await azureDevOpsAPI.createWorkItem('Task', 'Define System Architecture', `Outline components: frontend (${frontendNames.join(', ')}), backend (${backendNames.join(', ')}), database (${databaseNames.join(', ')})`, 'Solution Architect', userStoryId);\r\n        await azureDevOpsAPI.createWorkItem('Task', 'Create Technical Specifications', `Specify services and models based on decomposition`, 'Tech Lead', userStoryId);\r\n        await azureDevOpsAPI.createWorkItem('Task', 'Implement Frontend', `Develop ${frontendNames.join(', ')}`, 'Developer Lead', userStoryId);\r\n        await azureDevOpsAPI.createWorkItem('Task', 'Implement Backend', `Develop ${backendNames.join(', ')}`, 'Developer Lead', userStoryId);\r\n        await azureDevOpsAPI.createWorkItem('Task', 'Set Up Database', `Create models: ${databaseNames.join(', ')}`, 'Developer Lead', userStoryId);\r\n        await azureDevOpsAPI.createWorkItem('Task', 'Create Test Cases', `Develop test scenarios based on requirement ${requirement.id}`, 'QA Lead', userStoryId);\r\n    }\r\n\r\n    return { message: 'Work items created successfully' };\r\n}\r\n\r\nmodule.exports = { createWorkItems };"
  }
]